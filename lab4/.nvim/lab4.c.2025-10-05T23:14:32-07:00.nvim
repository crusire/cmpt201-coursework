#define _POSIX_C_SOURCE 200809L
#define _DEFAULT_SOURCE

#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

struct header {
  uint64_t size;
  struct header *next;
};

void print_out(char *format, void *data, size_t data_size) {
  char buf[256];
  ssize_t len = snprintf(buf, 256, format,
                         data_size == sizeof(uint64_t) ? *(uint64_t *)data
                                                       : *(void **)data);
  if (len < 0) {
    perror("snprintf");
  }
  write(STDOUT_FILENO, buf, len);
}

int main() {
  intptr_t increment = 256;
  size_t size = 128;

  void *new_heap_address = sbrk(increment);
  struct header *first_block = (struct header *)new_heap_address;
  first_block->size = size;
  first_block->next = NULL;

  new_heap_address = new_heap_address + 128;
  struct header *second_block = (struct header *)new_heap_address;
  second_block->size = size;
  second_block->next = first_block;

  print_out("first block:       %p\n", &first_block, sizeof(&first_block));
  print_out("second block:      %p\n", &second_block, sizeof(&second_block));
  printf("first block size:  %lu\n", first_block->size);
  print_out("first block next:  %p\n", &first_block->next,
            sizeof(&first_block->next));
  printf("second block size: %lu\n", second_block->size);
  print_out("second block next: %p\n", &second_block->next,
            sizeof(&second_block->next));

  memset(first_block, 0, size);
  memset(second_block, 1, size);

  void *current_byte = second_block;

  for (int i = 0; i < 256; i++) {
    print_out("%lu\n", current_byte, 1);
    current_byte++;
  }
}
